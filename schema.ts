/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/products": {
    /**
     * Get all products 
     * @description Returns a list of all products available for sale
     */
    get: {
      /**
       * Get all products 
       * @description Returns a list of all products available for sale
       */
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": (components["schemas"]["Product"])[];
          };
        };
      };
    };
    /**
     * Add a new product 
     * @description Adds a new product to the ecommerce system
     */
    post: {
      /**
       * Add a new product 
       * @description Adds a new product to the ecommerce system
       */
      /** @description Product object to add */
      requestBody: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Product"];
          };
        };
      };
    };
  };
  "/products/{productId}": {
    /**
     * Get product by ID 
     * @description Returns a product by its ID
     */
    get: {
      /**
       * Get product by ID 
       * @description Returns a product by its ID
       */
      parameters: {
          /** @description ID of the product to retrieve */
        path: {
          productId: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Product"];
          };
        };
        /** @description Product not found */
        404: never;
      };
    };
    /**
     * Update product by ID 
     * @description Updates an existing product by its ID
     */
    put: {
      /**
       * Update product by ID 
       * @description Updates an existing product by its ID
       */
      parameters: {
          /** @description ID of the product to update */
        path: {
          productId: number;
        };
      };
      /** @description Product object to update */
      requestBody: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Product"];
          };
        };
        /** @description Product not found */
        404: never;
      };
    };
    /**
     * Delete product by ID 
     * @description Deletes a product by its ID
     */
    delete: {
      /**
       * Delete product by ID 
       * @description Deletes a product by its ID
       */
      parameters: {
          /** @description ID of the product to delete */
        path: {
          productId: number;
        };
      };
      responses: {
        /** @description No content */
        204: never;
        /** @description Product not found */
        404: never;
      };
    };
  };
  "/cart": {
    /**
     * Get actual cart 
     * @description Returns the actual cart
     */
    get: {
      /**
       * Get actual cart 
       * @description Returns the actual cart
       */
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
    /**
     * Add a new item to the cart 
     * @description Adds a new item to the cart
     */
    post: {
      /**
       * Add a new item to the cart 
       * @description Adds a new item to the cart
       */
      /** @description Cart item object to add */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CartItem"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["CartItem"];
          };
        };
      };
    };
  };
  "/user": {
    /**
     * Get user information 
     * @description Returns the user information
     */
    get: {
      /**
       * Get user information 
       * @description Returns the user information
       */
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    /**
     * Update user information 
     * @description Updates the user information
     */
    put: {
      /**
       * Update user information 
       * @description Updates the user information
       */
      /** @description User object to update */
      requestBody: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    /**
     * Delete user information 
     * @description Deletes the user information
     */
    delete: {
      /**
       * Delete user information 
       * @description Deletes the user information
       */
      responses: {
        /** @description No content */
        204: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Product: {
      /** @description Unique identifier for the product */
      id?: number;
      /** @description Name of the product */
      name: string;
      /** @description Slug of the product */
      slug?: string;
      /** @description Description of the product */
      description?: string;
      /**
       * Format: float 
       * @description Price of the product
       */
      price: number;
      /**
       * Format: uri 
       * @description URL to the product image
       */
      image?: string;
    };
    CartItem: {
      /** @description Unique identifier for the cart item */
      id?: number;
      product: components["schemas"]["Product"];
      /** @description Quantity of the product in the cart */
      quantity: number;
    };
    Cart: {
      /** @description Unique identifier for the cart */
      id?: number;
      items: (components["schemas"]["CartItem"])[];
      /**
       * Format: float 
       * @description Total price of the cart
       */
      total: number;
    };
    User: {
      /** @description User name */
      name: string;
      /** @description User email */
      email: string;
      /** @description User address */
      address: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
